{"version":3,"file":"static/js/538.494a97fb.chunk.js","mappings":"uNAKOA,EAAcC,EAAAA,KAAaC,MAAM,CACrCC,SAAUF,EAAAA,KACPG,IAAI,EAAG,cACPC,IAAI,GAAI,aAKRC,SAAS,YACZC,MAAON,EAAAA,KAAaM,MAAM,iBAAiBD,SAAS,cAmFvD,EAhFkB,SAAC,GAAa,IAAZE,EAAW,EAAXA,MAElB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CAAEF,MAAO,GAAIJ,SAAU,GAAIO,YAAY,GACtDC,iBAAkBX,EAClBY,SAAU,SAACC,EAAD,GAA2C,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,UAClCC,YAAW,WAETR,EAAMK,EAAON,MAAOM,EAAOV,SAAUU,EAAOH,YAC5CI,GAAc,GACdC,MACC,MATP,SAYG,gBACCF,EADD,EACCA,OAKAI,GAND,EAECC,OAFD,EAGCC,QAHD,EAICC,aAJD,EAKCC,WALD,EAMCJ,cACAK,EAPD,EAOCA,aAPD,OASC,UAAC,KAAD,CAAMV,SAAUK,EAAhB,WACE,SAACM,EAAA,QAAD,qBACA,SAACA,EAAA,QAAD,WACE,SAAC,KAAD,CACEC,KAAK,QACLC,KAAK,QACLC,MAAOb,EAAON,MACdoB,UAAU,aAGd,SAAC,KAAD,CACEF,KAAK,QACLG,UAAU,MACVD,UAAU,kBAEZ,SAACJ,EAAA,QAAD,CAAqBI,UAAU,OAA/B,uBACA,SAACJ,EAAA,QAAD,WACE,SAAC,KAAD,CACEC,KAAK,WACLC,KAAK,WACLE,UAAU,QACVD,MAAOb,EAAOV,cAGlB,SAAC,KAAD,CACEsB,KAAK,WACLG,UAAU,MACVD,UAAU,kBAGZ,mBAAOA,UAAU,OAAjB,WACE,SAAC,KAAD,CACEH,KAAK,WACLC,KAAK,aACLC,MAAM,aACNG,QAAShB,EAAOH,aALpB,kBAUA,SAACoB,EAAA,EAAD,CACEN,KAAK,SACLG,UAAU,QACVI,SAAUT,EACVU,QAAQ,OAJV,4B,iDCvDZ,GAAeC,EAAAA,EAAAA,KAJS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,UAGmB,CAAE3B,MAAAA,EAAAA,IAA1C,EArBc,SAAC,GAAuB,IAArBA,EAAoB,EAApBA,MACf,OADmC,EAAb2B,QAEb,SAAC,KAAD,CAAUE,GAAG,cAIpB,oBAASV,UAAU,aAAnB,UACE,SAACW,EAAA,EAAD,WACE,UAACC,EAAA,EAAD,CAAKC,GAAG,IAAIb,UAAU,SAAtB,WACE,eAAIA,UAAU,mBAAd,oBACA,SAAC,EAAD,CAAWnB,MAAOA","sources":["components/Login/LoginForm.js","components/Login/Login.js"],"sourcesContent":["import { Formik, Form, Field, ErrorMessage } from \"formik\";\r\nimport {  Form as FormBootstrap,  Button } from \"react-bootstrap\";\r\nimport * as Yup from \"yup\";\r\n\r\n\r\n const LoginSchema = Yup.object().shape({\r\n   password: Yup.string()\r\n     .min(2, \"Too Short!\")\r\n     .max(20, \"Too Long!\")\r\n    //  .matches(\r\n    //    /^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,})/,\r\n    //    \"Password must be strong.\"\r\n    //  )\r\n     .required(\"Required\"),\r\n   email: Yup.string().email(\"Invalid email\").required(\"Required\"),\r\n });\r\n\r\nconst LoginForm = ({login}) => {\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ email: \"\", password: \"\", rememberMe: true }}\r\n        validationSchema={LoginSchema}\r\n        onSubmit={(values, { setSubmitting, resetForm }) => {\r\n          setTimeout(() => {\r\n            // alert(JSON.stringify(values, null, 2));\r\n            login(values.email, values.password, values.rememberMe);\r\n            setSubmitting(false);\r\n            resetForm();\r\n          }, 400);\r\n        }}\r\n      >\r\n        {({\r\n          values,\r\n          errors,\r\n          touched,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n          isSubmitting,\r\n        }) => (\r\n          <Form onSubmit={handleSubmit}>\r\n            <FormBootstrap.Label>Email</FormBootstrap.Label>\r\n            <FormBootstrap.Group>\r\n              <Field\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={values.email}\r\n                className=\"w-100\"\r\n              />\r\n            </FormBootstrap.Group>\r\n            <ErrorMessage\r\n              name=\"email\"\r\n              component=\"div\"\r\n              className=\"errorMessage\"\r\n            />\r\n            <FormBootstrap.Label className=\"mt-2\">Password</FormBootstrap.Label>\r\n            <FormBootstrap.Group>\r\n              <Field\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className=\"w-100\"\r\n                value={values.password}\r\n              />\r\n            </FormBootstrap.Group>\r\n            <ErrorMessage\r\n              name=\"password\"\r\n              component=\"div\"\r\n              className=\"errorMessage\"\r\n            />\r\n\r\n            <label className=\"my-2\">\r\n              <Field\r\n                type=\"checkbox\"\r\n                name=\"rememberMe\"\r\n                value=\"rememberMe\"\r\n                checked={values.rememberMe}\r\n              />\r\n              Remember me\r\n            </label>\r\n\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"w-100\"\r\n              disabled={isSubmitting}\r\n              variant=\"dark\"\r\n            >\r\n              Login\r\n            </Button>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import LoginForm from \"./LoginForm\";\r\nimport { Col, Row } from \"react-bootstrap\";\r\nimport { connect } from \"react-redux\";\r\nimport { login } from \"../../redux/auth-reducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Login = ({ login, isAuth }) => {\r\n  if (isAuth) {\r\n    return <Navigate to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <section className=\"login mt-5\">\r\n      <Row>\r\n        <Col md=\"4\" className=\"m-auto\">\r\n          <h1 className=\"mt-5 text-center\">Login</h1>\r\n          <LoginForm login={login} />\r\n        </Col>\r\n      </Row>\r\n    </section>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport default connect(mapStateToProps, { login })(Login);\r\n"],"names":["LoginSchema","Yup","shape","password","min","max","required","email","login","initialValues","rememberMe","validationSchema","onSubmit","values","setSubmitting","resetForm","setTimeout","handleSubmit","errors","touched","handleChange","handleBlur","isSubmitting","Form","type","name","value","className","component","checked","Button","disabled","variant","connect","state","isAuth","auth","to","Row","Col","md"],"sourceRoot":""}